---
layout: post
title:  "Javascript Objects"
date:   2020-06-13 01:40:27 +0900
categories: Javascript
---

Udemy - [The Complete JavaScript Course 2020: Build Real Projects!](https://www.udemy.com/course/the-complete-javascript-course/) 강좌의 섹션 5. Advanced JavaScript: Objects and Functions를 요약한 내용입니다.

## 0. Object and Primitives
- js에선 primitive를 제외한 모든 것이 object. 

### 1) Primitives
- primitives : numbers, strings, booleans, undefined, null

- primitive를 담고있는 variable : data가 값. pass by value (variable을 복사할 때나 function argument로 쓸 때 data 값을 복사해서 넣음).
{% highlight javascript %}
//variable에서의 예
var a = 1;
var b = a;
a = 2;
console.log(a); // 2 
console.log(b); // 1
{% endhighlight %}

{% highlight javascript %}
//function에서의 예
var a = 1;
var b = 2;

function change(num1, num2){
    num1 = num2
}

change(a, b);
console.log(a, b); // 1, 2
{% endhighlight %}

<br/>

### 2) Object
- object : arrays, functions, objects, dates, wrappers for numbers, 등등.

- object를 담고있는 variable : data의 주소 object가 값. pass by reference처럼 보이지만 정확하게는 pass by value. (variable을 복사할 때나 function argument로 쓸 때 data 값(=주소 object)을 복사해서 넣음)

- pass by value이므로 property reassignment는 가능하지만, object reassignment는 불가능.

{% highlight javascript %}
//참조 1에서 발췌한 코드
//variable에서의 예
var obj1 = {
    name: 'John',
    age: 26
};

var obj2 = obj1; 
obj1.age = 30;

console.log(obj1.age); //30
console.log(obj2.age); //30
{% endhighlight %}

{% highlight javascript %}
//function에서의 예 
var dog = {
    hungry: true
};

function reassignProperty(obj) {
    obj.hungry = false
}

function reassignObject(obj){
    obj = {
        wag: true
    }
}

reassignProperty(dog); 
console.log(dog); //dog {hungry: false}

reassignObject(dog);
console.log(dog); //dog {hungry: false}

{% endhighlight %}

<br/>

## 1. Object Oriented Programming
- OOP란? : Object가 중심이 되는 프로그래밍 모델. 

- methods, property 통해 한 object가 다른 object와 상호작용.

- 깔끔한 코드 작성 가능. 

<br/>

### 1) Constructor
![js-object1](https://eungang3.github.io/sue-is-programming/assets/js-object1.jpg)

- constructor : 템플릿 역할을 하는 object. 

- instance : constructor로 만들어낸 object.

- function constructor : 템플릿(=constructor object)을 만드는 function.

- function constructor pattern : function constructor로 obeject 만드는 방식.

{% highlight javascript %}
//참조 1에서 발췌한 코드

/*
function constructor 만들기
1. function constructor명은 항상 대문자로 시작
2. parameter에는 object에 들어갈 variable 입력
*/

var Person = function(name, yearOfBirth, job){ 
    this.name = name;
    this.yearOfBirth = yearOfBirth;
    this.job = job;
}

/*
function constructor로 instance 생성하기(=instantiation)
1. new operator 사용해서 빈 object 생성
2. new는 function constructor의 this가 빈 object를 가리키게 함. 
*/

var john = new Person('John', 1990, 'teacher');
// john object는 Person object의 instance
{% endhighlight %}

<br/>

### 2) Inheritance
![js-object2](https://eungang3.github.io/sue-is-programming/assets/js-object2.jpg)

- 한 object에게 다른 object의 property, method를 상속해주는 것. 

- prototype과 inheritance : 
    + js는 prototype-based language -> __모든 object에는 prototype property__ 존재

    + 부모 object는 __상속할__ property, method를 prototype property에 넣어둠. (=부모의 prototype property에는 __자식의 prototype이 들어감__)
    
    + 자식 object는 모든 부모 object의 prototype property에 들어간 것을 상속받음.   
    
    + 모든 object의 조상은 Object라는 object임.

- __prototype chain__ : 접근 가능한 모든 부모 object의 prototype property를 모은 것. 현재 object에서 요청한 property, method를 찾을 수 없으면 부모 object의 prototype property를 타고 올라가면서 찾아봄. Object object에서도 찾을 수 없다면 null 리턴.

{% highlight javascript %}
//참조 1에서 발췌한 코드

var Person = function(name, yearOfBirth, job){ 
    this.name = name;
    this.yearOfBirth = yearOfBirth;
    this.job = job;
}

/* Prototpe property로 method 상속하기  */
Person.prototype.calculatelateAge = function(){
    console.log(2016 - this.yearOfBirth);
};

/* Prototpe property로 property 상속하기(잘 안씀) */
Person.prototype.lastName = 'Smith';

var john = new Person('John', 1990, 'teacher');

john.calculateAge(); //26 출력
console.log(john.lastName); //Smith 출력

john.__proto__ === Person.prototype //true 출력
john.hasOwnProperty('lastName') //false 출력
//hasOwnProperty는 자기가 갖고있는 것 중에서만 찾음
john instanceOf Person //true 출력

{% endhighlight %}

<br/>

### 3) Object.create
- prototype 역할 하는 object를 정의한 다음 그것을 바탕으로 새 object 생성하는 방식.

- 어느 object가 prototype인지 직접적으로 보여주기 때문에 복잡한 구조도 명료하게 작성 가능.

{% highlight javascript %}
//참조 1에서 발췌한 코드

var personProto = {
    calculateAge: function(){
        console.log(2016 - this.yearOfBirth);
}

var john = Object.create(personProto);
john.name = 'John';
john.yearOfBirth = 1990;
john.job = 'teacher';

var jane = Object.create(personProto, {
    name: { value: 'Jane' },
    yearOfBirth: { vaule : 1969 },
    job: { value: 'designer' }
});
{% endhighlight %}

<br/><br/>
출처 : <br/>
<sup>1</sup>Jonas Schmedtmann. The Complete JavaScript Course 2020: Build Real Projects!. Retrieved June 06, 2020, from [https://www.udemy.com/course/the-complete-javascript-course/](https://www.udemy.com/course/the-complete-javascript-course/)<br/>