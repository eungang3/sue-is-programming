---
layout: post
title:  " SQL, model, migration"
date:   2021-03-05 07:16:27 +0900
categories: HTTP
---

## 0. SQL, Model, Migration
- SQL : 데이터베이스를 조작하는 언어.
- Model : 데이터베이스의 스키마를 정의하는 Django 클래스.  
- Migration : Model을 바탕으로 SQL query를 생성하여 데이터베이스의 스키마를 업데이트하는 것.

<br/>

## 1. SQLite
- Django의 디폴트 database management system. 용량 가벼운 편.
- SQLite 설치 -> 터미널에서 "touch employees.sql"로 파일 만들기 -> sqlite3 employees.sql로 파일 열기
- 파일 열고 ".table" 입력하면 존재하는 테이블 모두 볼 수 있음

<br/>

### 1) Table 만들기
```
CREATE TABLE employees(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    salary INTEGER NOT NULL
);
```
#### cf) Column Types
- TEXT : string 저장
- NUMERIC : 숫자 일반
- INTEGER : 정수
- REAL : 실수
- BLOB (Binary Large Object)

#### cf) Constraints : column 만들 때 둘 수 있는 제약조건
- CHECK : 새로운 행 생성 시 특정 제약에 맞는 형식인지 확인함
- DEFAULT : 값이 없으면 디폴트 값 생성
- NOT NULL : 값이 있어야 함
- PRIMARY KEY : 데이터베이스에서 검색할 때 주요 key로 사용함
- UNIQUE : 이 column의 모든 row는 고유한 값만 가질 수 있음

<br/>

### 2) Table에 데이터 넣기
```
INSERT INTO employees(name, salary) VALUES ("Sue", 100);
```

<br/>

### 3) row 선택하기
- 모든 row 선택
```
SELECT * FROM employees
```
- 특정 column 선택
```
SELECT salary FROM employees
```
- 특정 row 선택
```
SELECT * FROM employees WHERE id = 2;
SELECT * FROM employees WHERE name = "Sue";
SELECT * FROM employees WHERE salary > 50;
SELECT * FROM employees WHERE salary > 50 AND name = "Sue";
SELECT * FROM employees WHERE salary IN ("100", "80");
```

#### cf) wildcard character %
- %는 0개 또는 1개 이상의 문자를 뜻함
- 하단 예시 : u가 들어간 모든 row를 선택
```
SELECT * FROM employees WHERE name LIKE "%u%";
```

#### cf) 터미널에서 보기 쉽게 나타내기
- ".mode columns"와 ".headers yes" 커맨드 사용하면 보기 쉽게 나옴

<br/>

### 4) function 사용하기
- function 예 : AVERAGE, COUNT, MAX, MIN, SUM
```
SELECT AVG(salary) FROM employees;
SELECT SUM(salary) FROM employees WHERE salary > 50;
```

<br/>

### 5) 이미 입력한 row 값 변경하기(update)
```
UPDATE employees
    SET salary =  2000
    WHERE name = "Sue";
```

### 6) 이미 입력한 값 삭제하기
```
DELETE FROM employees WHERE name = "Sue";
```

### 7) 기타 clause
- LIMIT, ORDER BY, GROUP BY, HAVING

<br/>

### 8) Table 연결하기
![sql1](https://eungang3.github.io/sue-is-programming/assets/sql1.jpg)
- 아이디만 있는 테이블을 association table이라고 함
- foreign key : 두 테이블을 연결하는 key. 다른 테이블의 primary key를 담고 있는 필드.
- JOIN : 두 테이블 연결해서 query 넣을 수 있게 해줌. Inner Join, Left Join, Right Join 등 
- Inner Join 예 : 테이블 간 매치 없는 row는 무시함

```
CREATE TABLE Assignment(
FOREIGN KEY (Employees_id) REFERENCES Employees (id)
FOREIGN KEY (Projects_id) REFERENCES Projects (id)
```

```
SELECT name, salary
FROM Employees JOIN Assignment
ON Assignment.Employees_id = Employees.id
```

<br/>

### 9) Indexing
- 자주 사용하는 테이블의 column에 인덱스 부여 -> 데이터베이스에서 데이터 빠르게 가져올 수 있음
- 인덱스 사용하면 테이블 업데이트하는 데 더 오랜 시간 걸림 -> 꼭 필요한 곳에만 사용
```
CREATE INDEX name_index ON employees (name);
```

<br/>

#### cf) SQL Vulnerabilities
- SQL Injection
 + 악성 유저가 인풋에 SQL 코드를 넣어서 사이트의 보안 장치를 무력화하는 것
 ```
 SELECT * FROM users
 WHERE username = username AND password = password;
 ```
 + username 인풋에 Sue" --라고 넣는 경우 : --" AND password = "12345"; 부분이 코멘트 처리됨 -> 비밀번호 없이도 Sue 계정에 접근할 수 있게 됨
 ```
 SELECT * FROM users
 WHERE username = "Sue"--" AND password = "12345";
 ```
 + 방지하기 : SQL에서 escape sequence 사용해서 인풋은 항상 plain text로만 인식하게 만들기, django 등 SQL을 다루는 프로그램에서 자체 escape sequence 사용하기 
 
 <br/>
 
- Race Conditions
 + 데이터베이스에 동시에 여러 개 query가 들어오는 경우를 말함
 + 동시에 들어오는 query를 막는 장치가 없는 경우 : 1000원 들어있는 은행계좌인데 웹에서 1000원 요청, 모바일에서 1000원 요청 -> 2000원 인출 가능해짐
 + 방지하기 : 한 query가 완료되기 전까지 다른 요청 못 들어오게 데이터베이스를 잠그기, query 실행중이라고 표시하기
 
 <br/>
 
## 2. Django Models
 - model : 데이터베이스의 스키마를 정의하는 Django 클래스.  
 - model 하나 = 데이터베이스의 table 하나 
 - 프로젝트 앱 내 models.py에 클래스 정의해서 생성 
 
 {% highlight python %}
 # models.py
 # Django의 model class extends해서 사용
 from django.db import models
 
 class Project(models.Model):
    title = models.CharField(max_length=64)
    duration = models.IntegerField()
    
    # 출력되는 object를 읽기 쉬운 string으로 바꿔줌
    def __str__:
        return f"title: {self.title}, duration {self.duration}"
    
  class Assignment(models.Model):
    # on_delete=models.CASCADE는 primary key가 삭제되었을 때 foreign key를 가진 행도 같이 삭제하라는 뜻 
    # related name은 
    title = models.ForeignKey(Project, on_delete=models.CASCADE, related_name="titles")
    participants = models.CharField(max_length=64)
 {% endhighlight %}
  
 <br/>
 
 ## 3. Migration
- migration : Model을 바탕으로 SQL query를 생성하여 데이터베이스의 스키마를 업데이트하는 것. 
- 데이터베이스 스키마를 git처럼 버전 관리할 수 있음

### 1) 모델 바탕으로 migration 만들기 (=SQL query 생성하기)
- 커맨드 ```python manage.py makemigrations``` 
- 앱 내 migration 디렉토리에 0001_initial.py 파일 생성. 
- 이후 model.py를 수정하고 저장하면 0001_initial.py 파일에 자동 반영됨.

### 2) migration 실행해서 데이터베이스에 적용하기 (=데이터베이스에서 SQL query 실행하기) 
- 커맨드 ```python manage.py migrate```
- 데이터베이스 생성 (=db.sqlite3 파일 생성)
- 데이터베이스(db.sqlite3)에 model 바탕으로 스키마 생성

### 3) 데이터베이스에 데이터 입력하기
- Django Shell 들어가기 : 터미널에서 커맨드```python manage.py shell```

{% highlight python %}
# django shell에서 실행
# models.py에서 정의한 모델 불러오기
fom projects.models import Project

# 모델 바탕으로 object 생성
f = Project(title="web", duration=30)

# 데이터베이스에 정보 입력
f.save()
{% endhighlight %}

{% highlight python %}
# 데이터베이스에 있는 모든 project 불러오기
Flight.objects.all()

# __str__ method 없으면 <QuerySet [<Flight: flight object(1)>]> 출력
# __str__ method 있으면 return에 정의한 대로 스트링 
{% endhighlight %}
