---
layout: post
title:  " SQL, model, migration"
date:   2021-03-05 07:16:27 +0900
categories: HTTP
---

## 0. SQL, Model, Migration
- SQL : 데이터베이스를 조작하는 언어.
- Model : Django 등에서 추상화를 통해 SQL을 다루는 방식  
- Migration : Model에서 일어나는 변화를 데이터베이스에 업데이트해주는 기술

<br/>

## 1. SQLite
- Django의 디폴트 database management system. 용량 가벼운 편.
- SQLite 설치 -> 터미널에서 "touch employees.sql"로 파일 만들기 -> sqlite3 employees.sql로 파일 열기
- 파일 열고 ".table" 입력하면 존재하는 테이블 모두 볼 수 있음

<br/>

### 1) Table 만들기
```
CREATE TABLE employees(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    salary INTEGER NOT NULL
);
```
#### cf) Column Types
- TEXT : string 저장
- NUMERIC : 숫자 일반
- INTEGER : 정수
- REAL : 실수
- BLOB (Binary Large Object)

#### cf) Constraints : column 만들 때 둘 수 있는 제약조건
- CHECK : 새로운 행 생성 시 특정 제약에 맞는 형식인지 확인함
- DEFAULT : 값이 없으면 디폴트 값 생성
- NOT NULL : 값이 있어야 함
- PRIMARY KEY : 데이터베이스에서 검색할 때 주요 key로 사용함
- UNIQUE : 이 column의 모든 row는 고유한 값만 가질 수 있음

<br/>

### 2) Table에 데이터 넣기
```
INSERT INTO employees(name, salary) VALUES ("Sue", 100);
```

<br/>

### 3) row 선택하기
- 모든 row 선택
```
SELECT * FROM employees
```
- 특정 column 선택
```
SELECT salary FROM employees
```
- 특정 row 선택
```
SELECT * FROM employees WHERE id = 2;
SELECT * FROM employees WHERE name = "Sue";
SELECT * FROM employees WHERE salary > 50;
SELECT * FROM employees WHERE salary > 50 AND name = "Sue";
SELECT * FROM employees WHERE salary IN ("100", "80");
```

#### cf) wildcard character %
- %는 0개 또는 1개 이상의 문자를 뜻함
- 하단 예시 : u가 들어간 모든 row를 선택
```
SELECT * FROM employees WHERE name LIKE "%u%";
```

#### cf) 터미널에서 보기 쉽게 나타내기
- ".mode columns"와 ".headers yes" 커맨드 사용하면 보기 쉽게 나옴

<br/>

### 4) function 사용하기
- function 예 : AVERAGE, COUNT, MAX, MIN, SUM
```
SELECT AVG(salary) FROM employees;
SELECT SUM(salary) FROM employees WHERE salary > 50;
```

<br/>

### 5) 이미 입력한 row 값 변경하기(update)
```
UPDATE employees
    SET salary =  2000
    WHERE name = "Sue";
```

### 6) 이미 입력한 값 삭제하기
```
DELETE FROM employees WHERE name = "Sue";
```

### 7) 기타 clause
- LIMIT, ORDER BY, GROUP BY, HAVING

<br/>

### 8) Table 연결하기
![sql1](https://eungang3.github.io/sue-is-programming/assets/sql1.jpg)
- 아이디만 있는 테이블을 association table이라고 함
- JOIN : 여러 테이블 연결해서 query 넣을 수 있게 해줌. Inner Join, Left Join, Right Join 등 
- Inner Join 예 : 테이블 간 매치 없는 row는 무시함
```
SELECT name, salary
FROM Employees JOIN Assignment
ON Assignment.Employees_id = Employees.id
```

### 9) Indexing
- 자주 사용하는 테이블의 column에 인덱스 부여해서 찾기 쉽게 만들기
```
CREATE INDEX name_index ON employees (name);
